<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/11/hello-world/"/>
    <url>/2022/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>吴军《计算之魂》笔记与心得（待更新）</title>
    <link href="/2022/01/06/%E5%90%B4%E5%86%9B%E3%80%8A%E8%AE%A1%E7%AE%97%E4%B9%8B%E9%AD%82%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B8%8E%E5%BF%83%E5%BE%97/"/>
    <url>/2022/01/06/%E5%90%B4%E5%86%9B%E3%80%8A%E8%AE%A1%E7%AE%97%E4%B9%8B%E9%AD%82%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B8%8E%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。"><a href="#吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。" class="headerlink" title="吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。"></a>吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。</h3><p>吴军的书籍我认为是每个互联网及通信行业同学必读的书籍，尤其是《浪潮之巅》一书。今年12月他发售了新书《计算之魂》，这也应该是他面向受众比较小的一本书，全书都与算法相关。作为一名初级前端，我并没有真正系统地学习并练习过算法，因此阅读起来难度很大，因此我只是分享一些普适度更高的计算机行业的各种思想，至于算法部分待日后再补上。</p><h4 id="计算机工程师分级"><a href="#计算机工程师分级" class="headerlink" title="计算机工程师分级"></a>计算机工程师分级</h4><p>吴军喜欢用朗道的方法，将计算机工程师分为五 级。一级工程师的贡献是二级的 10 倍，二级是三级的 10 倍，以此类推。</p><p><strong>一级：能够开创一个产业，或者奠定一个学科的基础</strong></p><p><strong>二级：能够提出重要的计算机理论和实践中的新问题，并解决它们，还能设计和 实现别人做不出的产品。</strong></p><p><strong>三级：能够解决前人未解决的问题，并且能独立设计和实现产品，在市场上获得成功。</strong></p><p><strong>四级：能够用已知的最优方法（state of the art ）解决问题，并指导和带领其他人 一同完成更有影响力的工作。</strong></p><p><strong>五级： 能够独立解决问题，完成工程工作。</strong></p><p><strong>六级：能在他人指导下完成计算机工程师的工作。</strong></p><p><strong>七级：本科毕业自水平不错的大学的计算机专业，但没有参加过六个月以上实习 的学生。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>专业书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解Javascript中的this指向</title>
    <link href="/2021/05/01/%E7%90%86%E8%A7%A3Javascript%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/"/>
    <url>/2021/05/01/%E7%90%86%E8%A7%A3Javascript%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p><strong>关于this,初学者容易弄混，有经验的前端工程师通常用箭头函数来处理问题，因而实现了可以正常工作但是细究却不容易全面地说清，因而写下这篇尽可能简短的文章以防止自己遗忘。</strong></p><h4 id="1-this是什么"><a href="#1-this是什么" class="headerlink" title="1.this是什么"></a>1.this是什么</h4><p>当一个函数被调用的时候,会创建一个执行上下文。这个执行上下文会包含函数在哪里调用，函数的调用方式，传入的参数等信息。this是其中的一个属性。</p><h4 id="2-this的指向"><a href="#2-this的指向" class="headerlink" title="2.this的指向"></a>2.this的指向</h4><p>this并不是指向自己，而是指向调用它的那个对象作用域。任何函数都相当于某个对象的方法，全局作用域下的函数即为window的方法。调用该函数即调用window的方法。</p><p>对于箭头函数而言，箭头函数本身不绑定this，this指向的是最近作用域中的对象，即一层一层向外查找，直到找到某个作用域，即某个函数，再看这个函数调用时它所在的对象是谁，这个对象就是this指向的对象。this指向的是箭头函数定义位置的this，即作用域的this。<strong>注：函数有作用域，但是对象没有作用域，定时器和延时器中的箭头函数在一开始就定义了，只是延时执行。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> baz() &#123;<br><span class="hljs-regexp">//</span>当前的调用栈：baz<br> console.log(<span class="hljs-string">&#x27;baz&#x27;</span>); <br>bar()<span class="hljs-regexp">//</span>bar在baz里面调用<br>&#125;<br><span class="hljs-keyword">function</span> bar() &#123;<br><span class="hljs-regexp">//</span>当前的调用栈： baz -&gt; bar<br>console.log(<span class="hljs-string">&#x27;bar&#x27;</span>);<br>foo()<span class="hljs-regexp">//</span>foo在bar里面调用<br>&#125;<br><span class="hljs-keyword">function</span> foo()&#123;<br> <span class="hljs-regexp">//</span>当前的调用栈： baz -&gt; bar -&gt;foo<br> console.log(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>&#125;<br>baz() <span class="hljs-regexp">//</span> baz在全局被调用<br></code></pre></td></tr></table></figure><h4 id="3-常见绑定规则"><a href="#3-常见绑定规则" class="headerlink" title="3.常见绑定规则"></a>3.常见绑定规则</h4><p><strong>1.默认绑定</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><br>`function foo()&#123;<br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-number">123</span><span class="hljs-comment">//该变量a并没有被使用</span><br> console<span class="hljs-selector-class">.log</span>(this.a)<span class="hljs-comment">//此时this指向window（全局）。注意node环境没有window</span><br>&#125;<br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-number">456</span><br><span class="hljs-function"><span class="hljs-title">foo</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 456而不是123`</span><br></code></pre></td></tr></table></figure><p><strong>2.隐屎绑定( 调用的函数是否被某个对象拥有或则包含</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">foo</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    console.log(this.a);</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"> <span class="hljs-title">var</span> <span class="hljs-title">obj</span> = <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    a:123,</span></span><br><span class="hljs-comment"><span class="hljs-function">    foo </span></span><br><span class="hljs-comment"><span class="hljs-function">   &#125;</span></span><br><span class="hljs-function">   <span class="hljs-title">obj</span>.<span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">// 123</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>首先需要注意的是foo()的声明方式，及其以后如何被当作引用属性添加到obj中的。但是无论是直接在obj中定义还是先定义再添加为引用属性，这个函数严格来说都不属于obj对象。然而，调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时“拥有”或者“包含”函数引用。</p><p><strong>3.显示绑定</strong> (改变this的绑定对象)</p><p>这里介绍在Javascript中常用的方法：call()</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">foo</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    console.log(this.a);</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"> <span class="hljs-title">var</span> <span class="hljs-title">obj</span> = <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    a:123</span></span><br><span class="hljs-comment"><span class="hljs-function">   &#125;</span></span><br><span class="hljs-function">   <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">//undefined</span></span><br><span class="hljs-function">   <span class="hljs-title">foo</span><span class="hljs-params">()</span>.<span class="hljs-title">call</span><span class="hljs-params">(obj)</span>  <span class="hljs-comment">// 123</span></span><br><span class="hljs-function">   </span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p><strong>4.new绑定</strong>(构造函数调用) 使用new来调用函数，或者说发生构造调用的时候，hi自动执行下面的操作</p><p>  1.创建一个全新的对象<br>  2.这个对象会被执行[[Prototype]]链接。<br>  3.这个新对象会绑定到函数调用的this.<br>  4.如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这新的对象。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> <span class="hljs-params">(a)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">this.a = a</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">var</span> <span class="hljs-title">fn</span> = <span class="hljs-title">new</span> <span class="hljs-title">Foo</span><span class="hljs-params">(234)</span></span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(fn.a)</span> <span class="hljs-comment">// 234</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>使用new来调用Foo(..)时，我们会构造出一个新对象并把它绑定到Foo(..)调用中的this上。然后返回给fn,fn中的a自然有值了。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p><strong>普通情况下谁调用该函数，this就指向谁的作用域，即this指向最后调用它的那个对象。另外有call()，bind(),apply()等方法可以直接改变this的指向。new比较特殊，会返回一个this指向构造函数本身的对象。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻松理解Flexbox布局精要</title>
    <link href="/2021/03/01/%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3Flexbox%E5%B8%83%E5%B1%80%E7%B2%BE%E8%A6%81/"/>
    <url>/2021/03/01/%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3Flexbox%E5%B8%83%E5%B1%80%E7%B2%BE%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Flexbox布局核心思想"><a href="#1-Flexbox布局核心思想" class="headerlink" title="1.Flexbox布局核心思想"></a>1.Flexbox布局核心思想</h3><p>Flex布局的核心思想是<strong>只需声明布局应该具有的行为而不需要给出具体的实现方式.其优势在于父元素在子元素的宽高或其它属性不明确时仍然可以为其分配好合理的排列方式</strong>,浏览器负责完成实际布局.</p><p>当布局涉及到不定宽度，分布对⻬的场景时，就要优先考虑弹性盒布局。从使用频率与实际效果来看,felx布局更加适合于移动端,pad端等小规模的窗口平台.</p><h2 id="2-Flex结构"><a href="#2-Flex结构" class="headerlink" title="2.Flex结构"></a>2.Flex结构</h2><h3 id="1-flex元素结构"><a href="#1-flex元素结构" class="headerlink" title="1.flex元素结构"></a>1.flex元素结构</h3><p>采用 Flex 布局的元素，称为 Flex 容器，简称”<strong>容器</strong>“。它的子元素就是容器成员，称为 Flex 项目，简称”<strong>项目</strong>“</p><h3 id="2-flex物理结构"><a href="#2-flex物理结构" class="headerlink" title="2.flex物理结构"></a>2.flex物理结构</h3><p>容器默认存在两个轴：<strong>水平轴</strong>（main axis）和<strong>垂直轴</strong>（cross axis），项目默认沿主轴排列（水平轴）：</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
