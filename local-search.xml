<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>吴军《计算之魂》笔记与心得（待更新）</title>
    <link href="/2022/01/06/%E5%90%B4%E5%86%9B%E3%80%8A%E8%AE%A1%E7%AE%97%E4%B9%8B%E9%AD%82%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B8%8E%E5%BF%83%E5%BE%97/"/>
    <url>/2022/01/06/%E5%90%B4%E5%86%9B%E3%80%8A%E8%AE%A1%E7%AE%97%E4%B9%8B%E9%AD%82%E3%80%8B%E7%AC%94%E8%AE%B0%E4%B8%8E%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。"><a href="#吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。" class="headerlink" title="吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。"></a>吴军，前Google高级资深研究员，原腾讯副总裁，约翰霍普金斯大学计算机系董事会董事，人工智能、自然语言处理和网络搜索专家，现《得到》APP最著名的专栏作家。</h3><p>吴军的书籍我认为是每个互联网及通信行业同学必读的书籍，尤其是《浪潮之巅》一书。今年12月他发售了新书《计算之魂》，这也应该是他面向受众比较小的一本书，全书都与算法相关。作为一名初级前端，我并没有真正系统地学习并练习过算法，因此阅读起来难度很大，因此我只是分享一些普适度更高的计算机行业的各种思想，至于算法部分待日后再补上。</p><h4 id="计算机工程师分级"><a href="#计算机工程师分级" class="headerlink" title="计算机工程师分级"></a>计算机工程师分级</h4><p>吴军喜欢用朗道的方法，将计算机工程师分为五 级。一级工程师的贡献是二级的 10 倍，二级是三级的 10 倍，以此类推。</p><p><strong>一级：能够开创一个产业，或者奠定一个学科的基础</strong></p><p><strong>二级：能够提出重要的计算机理论和实践中的新问题，并解决它们，还能设计和 实现别人做不出的产品。</strong></p><p><strong>三级：能够解决前人未解决的问题，并且能独立设计和实现产品，在市场上获得成功。</strong></p><p><strong>四级：能够用已知的最优方法（state of the art ）解决问题，并指导和带领其他人 一同完成更有影响力的工作。</strong></p><p><strong>五级： 能够独立解决问题，完成工程工作。</strong></p><p><strong>六级：能在他人指导下完成计算机工程师的工作。</strong></p><p><strong>七级：本科毕业自水平不错的大学的计算机专业，但没有参加过六个月以上实习 的学生。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>专业书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101闫令琪《现代计算机图形学》笔记（超级大坑）</title>
    <link href="/2021/07/11/Games101%E9%97%AB%E4%BB%A4%E7%90%AA%E3%80%8A%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/11/Games101%E9%97%AB%E4%BB%A4%E7%90%AA%E3%80%8A%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>课程链接：<a href="https://www.bilibili.com/video/BV1X7411F744">B站</a></p><p><a href="http://games-cn.org/intro-graphics/">GAMES101:现代计算机图形学入门</a></p><p><a href="%5B%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%85%95%E8%AF%BE%E4%BF%A1%E6%81%AF%E6%95%B4%E7%90%86_%E5%9B%BE%E5%BD%A2%E5%AD%A6%E4%B8%8E%E5%8F%AF%E8%A7%86%E5%8C%96-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/wpxu08/article/details/119958817)">计算机图形学在mooc上的课程</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-什么是计算机图形学"><a href="#1-什么是计算机图形学" class="headerlink" title="1.什么是计算机图形学"></a>1.什么是计算机图形学</h3><p><strong>The use of computers to synthesize and manipulate visual information</strong></p><p><strong>利用计算机合成和处理视觉信息。</strong></p><p><del>当然，对于一个我这样的菜鸡前端而言，计算机图形学只是作为概论来让我进行了解，能够使用好three.js和其它的图形库才是我的目标。</del></p><p>本课程全面而系统地介绍了现代计算机图形学的四大组成部分：</p><p>（1）<strong>光栅化成像</strong>（2）<strong>几何表示</strong>（3）<strong>光的传播理论</strong>（4）<strong>动画与模拟</strong>。</p><p>自我理解类笔记精要</p><p>1.判断画面好不好可以直接看画面是不是足够亮，这与图形学的一项关键技术——全局光照有关。<br>2.特效可以算是最简单的图形学的应用。<br>3.将字体不断放大至一定尺度，字体仍然不怎么模糊。这涉及到两个概念，点阵和尺量。</p><p>Why Study Computer Graphics?</p><p>Fundamental Intellectual Challenges（基础知识的挑战）</p><p>Creates and interacts with realistic virtual world（创建并与现实的虚拟世界互动）</p><p>Requires understanding of all aspects of physical worlo（需要了解物质世界的各个方面）</p><p>New computing methods, displays, technologies（新的计算方法，显示，技术</p><p>Technical Challenges（技术挑战）</p><p>Math of (perspective) projections, curves, surfaces（透视投影、曲线、曲面的数学）</p><p>Physics of lighting and shading（光照和阴影的物理）</p><p>Representing / operating shapes in 3D（在3D中表示/操作形状）</p><p>Animation/ simulation（动画/模拟）</p><p>3D  graphies soofware    programming and hareware（3D软件编程和硬件）</p><p>GAMES的课不教</p><p>CV即一切需要猜测的内容</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解Javascript中的this指向</title>
    <link href="/2021/05/01/%E7%90%86%E8%A7%A3Javascript%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/"/>
    <url>/2021/05/01/%E7%90%86%E8%A7%A3Javascript%E4%B8%AD%E7%9A%84this%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p><strong>关于this,初学者容易弄混，有经验的前端工程师通常用箭头函数来处理问题，因而实现了可以正常工作但是细究却不容易全面地说清，因而写下这篇尽可能简短的文章以防止自己遗忘。</strong></p><h4 id="1-this是什么"><a href="#1-this是什么" class="headerlink" title="1.this是什么"></a>1.this是什么</h4><p>当一个函数被调用的时候,会创建一个执行上下文。这个执行上下文会包含函数在哪里调用，函数的调用方式，传入的参数等信息。this是其中的一个属性。</p><h4 id="2-this的指向"><a href="#2-this的指向" class="headerlink" title="2.this的指向"></a>2.this的指向</h4><p>this并不是指向自己，而是指向调用它的那个对象作用域。任何函数都相当于某个对象的方法，全局作用域下的函数即为window的方法。调用该函数即调用window的方法。</p><p>对于箭头函数而言，箭头函数本身不绑定this，this指向的是最近作用域中的对象，即一层一层向外查找，直到找到某个作用域，即某个函数，再看这个函数调用时它所在的对象是谁，这个对象就是this指向的对象。this指向的是箭头函数定义位置的this，即作用域的this。<strong>注：函数有作用域，但是对象没有作用域，定时器和延时器中的箭头函数在一开始就定义了，只是延时执行。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> baz() &#123;<br><span class="hljs-regexp">//</span>当前的调用栈：baz<br> console.log(<span class="hljs-string">&#x27;baz&#x27;</span>); <br>bar()<span class="hljs-regexp">//</span>bar在baz里面调用<br>&#125;<br><span class="hljs-keyword">function</span> bar() &#123;<br><span class="hljs-regexp">//</span>当前的调用栈： baz -&gt; bar<br>console.log(<span class="hljs-string">&#x27;bar&#x27;</span>);<br>foo()<span class="hljs-regexp">//</span>foo在bar里面调用<br>&#125;<br><span class="hljs-keyword">function</span> foo()&#123;<br> <span class="hljs-regexp">//</span>当前的调用栈： baz -&gt; bar -&gt;foo<br> console.log(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>&#125;<br>baz() <span class="hljs-regexp">//</span> baz在全局被调用<br></code></pre></td></tr></table></figure><h4 id="3-常见绑定规则"><a href="#3-常见绑定规则" class="headerlink" title="3.常见绑定规则"></a>3.常见绑定规则</h4><p><strong>1.默认绑定</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">`function foo()&#123;<br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-number">123</span><span class="hljs-comment">//该变量a并没有被使用</span><br> console<span class="hljs-selector-class">.log</span>(this.a)<span class="hljs-comment">//此时this指向window（全局）。注意node环境没有window</span><br>&#125;<br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-number">456</span><br><span class="hljs-function"><span class="hljs-title">foo</span><span class="hljs-params">()</span></span> <span class="hljs-comment">// 456而不是123`</span><br></code></pre></td></tr></table></figure><p><strong>2.隐屎绑定( 调用的函数是否被某个对象拥有或则包含</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">foo</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    console.log(this.a);</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"> <span class="hljs-title">var</span> <span class="hljs-title">obj</span> = <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    a:123,</span></span><br><span class="hljs-comment"><span class="hljs-function">    foo </span></span><br><span class="hljs-comment"><span class="hljs-function">   &#125;</span></span><br><span class="hljs-function">   <span class="hljs-title">obj</span>.<span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">// 123</span></span><br></code></pre></td></tr></table></figure><p>首先需要注意的是foo()的声明方式，及其以后如何被当作引用属性添加到obj中的。但是无论是直接在obj中定义还是先定义再添加为引用属性，这个函数严格来说都不属于obj对象。然而，调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时“拥有”或者“包含”函数引用。</p><p><strong>3.显屎绑定</strong> (改变this的绑定对象)</p><p>这里介绍在Javascript中常用的方法：call()</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">foo</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    console.log(this.a);</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"> <span class="hljs-title">var</span> <span class="hljs-title">obj</span> = <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    a:123</span></span><br><span class="hljs-comment"><span class="hljs-function">   &#125;</span></span><br><span class="hljs-function">   <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">//undefined</span></span><br><span class="hljs-function">   <span class="hljs-title">foo</span><span class="hljs-params">()</span>.<span class="hljs-title">call</span><span class="hljs-params">(obj)</span>  <span class="hljs-comment">// 123</span></span><br></code></pre></td></tr></table></figure><p><strong>4.new绑定</strong>(构造函数调用) 使用new来调用函数，或者说发生构造调用的时候，hi自动执行下面的操作</p><p>  1.创建一个全新的对象<br>  2.这个对象会被执行[[Prototype]]链接。<br>  3.这个新对象会绑定到函数调用的this.<br>  4.如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这新的对象。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> <span class="hljs-params">(a)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">this.a = a</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">var</span> <span class="hljs-title">fn</span> = <span class="hljs-title">new</span> <span class="hljs-title">Foo</span><span class="hljs-params">(234)</span></span><br><span class="hljs-function"><span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(fn.a)</span> <span class="hljs-comment">// 234</span></span><br></code></pre></td></tr></table></figure><p>使用new来调用Foo(..)时，我们会构造出一个新对象并把它绑定到Foo(..)调用中的this上。然后返回给fn,fn中的a自然有值了。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p><strong>普通情况下谁调用该函数，this就指向谁的作用域，即this指向最后调用它的那个对象。另外有call()，bind(),apply()等方法可以直接改变this的指向。new比较特殊，会返回一个this指向构造函数本身的对象。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础复习（二）v-on的事件修饰符</title>
    <link href="/2021/04/20/Vue%E4%B8%ADv-on%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2021/04/20/Vue%E4%B8%ADv-on%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="v-on的常见事件修饰符"><a href="#v-on的常见事件修饰符" class="headerlink" title="v-on的常见事件修饰符"></a>v-on的常见事件修饰符</h3><p><code>v-on</code> 提供了很多事件修饰符来辅助实现一些功能。事件修饰符有如下：</p><ul><li><p><code>.stop</code> 阻止冒泡。本质是调用 event.stopPropagation()。</p></li><li><p><code>.prevent</code> 阻止默认事件（默认行为）。本质是调用 event.preventDefault()。</p></li><li><p><code>.capture</code> 添加事件监听器时，使用捕获的方式（也就是说，事件采用捕获的方式，而不是采用冒泡的方式）。</p></li><li><p><code>.self</code> 只有当事件在该元素本身（比如不是子元素）触发时，才会触发回调。</p></li><li><p><code>.once</code> 事件只触发一次。</p></li><li><p><code>.&#123;keyCode | keyAlias&#125;</code> 只当事件是从侦听器绑定的元素本身触发时，才触发回调。</p></li><li><p><code>.native</code> 监听组件根元素的原生事件。</p></li></ul><p>PS：一个事件，允许同时使用多个事件修饰符。</p><p>写法示范：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!-- click事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 内联语句 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止冒泡 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止默认行为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  串联修饰符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop.prevent</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.<strong>.stop</strong>的举例</p><p>我们来看下面这个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue2.5.16.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.father</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">            <span class="hljs-attribute">background</span>: pink;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.child</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">background</span>: green;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fatherClick&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;childClick&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">fatherClick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;father 被点击了&#x27;</span>);</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">childClick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;child 被点击了&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上方代码中，存在冒泡的现象，父标签中包含了一个子标签。当点击子标签时，父标签也会被触发。打印顺序是：</p><ol><li><p>child 被点击了</p></li><li><p>father 被点击了</p></li></ol><p>如果我不想让子标签的点击事件冒泡到父亲,办法是：给子标签加一个事件修饰符.stop，阻止冒泡。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;childClick&quot;</span>&gt;</span>2.**.capture**举例<br></code></pre></td></tr></table></figure><p>.capture：触发事件时，采用捕获的形式，而不是冒泡的形式。</p><p>还是采用上面的例子：当按钮点击时，如果想要采取捕获的方式，而不是冒泡的方式，办法是：可以直接在父标签上加事件修饰符<code>.capture</code>。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;fatherClick&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当点击子标签时，打印结果是：</p><ol><li><p>father 被点击了</p></li><li><p>child 被点击了</p></li></ol><p><strong>.prevent</strong>的举例1</p><p>比如说，超链接<code>&lt;a&gt;</code>默认有跳转行为，那我可以通过事件修饰符<code>.prevent</code>阻止这种跳转行为。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue2.5.16.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 通过 .prevent 阻止超链接的默认跳转行为 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;linkClick&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">linkClick</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;超链接被点击了&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上方代码中：</p><ul><li><p>如果去掉.prevent，点击按钮后，既会打印log，又会跳转到百度页面。</p></li><li><p>现在加上了.prevent，就只会打印loeg，不会跳转到百度页面。</p></li></ul><p><strong>.prevent</strong>的举例2</p><p>现在有一个form表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;表单提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们知道，上面这个表单因为<code>type=&quot;submit&quot;</code>，因此它是一个提交按钮，点击按钮后，这个表单就会被提交到form标签的action属性中指定的那个页面中去。这是表单的默认行为。</p><p>现在，我们可以用<code>.prevent</code>来阻止这种默认行为。修改为：点击按钮后，不提交到服务器，而是执行我们自己想要的事件（在submit方法中另行定义）。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue2.5.16.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 阻止表单中submit的默认事件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 执行自定义的click事件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;mySubmit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;表单提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">mySubmit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">&#x27;ok&#x27;</span>);</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上方代码中，我们通过<code>.prevent</code>阻止了提交按钮的默认事件，点击按钮后，执行的是<code>mySubmit()</code>方法里的内容。这个方法名是可以随便起的，我们甚至可以起名为<code>submit</code>，反正默认的submit已经失效了。</p><p><strong>.self</strong>举例</p><p>.self 只有当事件在该元素本身（比如不是子元素）触发时，才会触发回调。</p><p>我们知道，在事件触发机制中，当点击子标签时，父标签会通过冒泡的形式被触发（父标签本身并没有被点击）。可如果我给父标签的点击事件设置<code>.self</code>修饰符，达到的效果是：子标签的点击事件不会再冒泡到父标签了，只有点击符标签本身，父标签的事件才会被触发。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;fatherClick&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>疑问</strong>：既然<code>.stop</code>和<code>.self</code>都可以阻止冒泡，那二者有什么区别呢？区别在于：前者能够阻止整个冒泡行为，而后者只能阻止自己身上的冒泡行为。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础复习(一)</title>
    <link href="/2021/04/03/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <url>/2021/04/03/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Vue的生命周期"><a href="#1-Vue的生命周期" class="headerlink" title="1.Vue的生命周期"></a>1.Vue的生命周期</h3><p><img src="http://doc.bufanui.com/uploads/vue/images/m_c16c4ab27124dfa20ecf0504af9c8211_r.jpg"></p><h4 id="1-1-什么是vue的生命周期？"><a href="#1-1-什么是vue的生命周期？" class="headerlink" title="1.1.什么是vue的生命周期？"></a>1.1.什么是vue的生命周期？</h4><p>每个组件都是各自独立的，每个组件都有自己的生命周期。从一个组件创建实例 -&gt; 数据初始化 -&gt; 挂载 -&gt; 更新 -&gt; 销毁，就是一个组件的生命周期。</p><h4 id="1-2-每个生命周期函数的类别与具体触发时间"><a href="#1-2-每个生命周期函数的类别与具体触发时间" class="headerlink" title="1.2.每个生命周期函数的类别与具体触发时间"></a>1.2.每个生命周期函数的类别与具体触发时间</h4><ul><li><p>创建期间的生命周期函数：</p><ul><li><strong>beforeCreate</strong>：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li><strong>created</strong>：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板(模板 比如<code>&#123;&#123;&#125;&#125;</code>)</li><li><strong>beforeMount</strong>：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li><strong>mounted</strong>：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li><p>运行期间的生命周期函数：</p><ul><li><strong>beforeUpdate</strong>：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li><strong>updated</strong>：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li><p>销毁期间的生命周期函数：</p><ul><li><p><strong>beforeDestroy</strong>：实例销毁之前调用。在这一步，实例仍然完全可用。</p></li><li><p><strong>destroyed</strong>：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p></li></ul></li></ul><h3 id="2-为什么data必须要写成一个函数而不是对象？"><a href="#2-为什么data必须要写成一个函数而不是对象？" class="headerlink" title="2.为什么data必须要写成一个函数而不是对象？"></a>2.为什么data必须要写成一个函数而不是对象？</h3><p>组件具有复用性，可以在同一个页面使用多个同一个组件。如果data是个对象的话那么同一类组件中的数据就会公用，导致数据混乱失控，而data是函数的话可以给每个组件实例产生各自的的数据，这些数据彼此独立。</p><h3 id="3-computed-和-watch-的区别"><a href="#3-computed-和-watch-的区别" class="headerlink" title="3.computed 和 watch 的区别"></a>3.computed 和 watch 的区别</h3><p>computed是计算属性，依赖其他属性计算值，并且computed会基于它的响应式依赖来进行缓存，只有响应式依赖发生改变时，才会重新求值；否则就直接返回上一次的计算结果 。</p><p>watch监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</p><p>当需要依赖别的属性来动态获得值时，使用computed。</p><p>对于监听到值的变化需要做一些复杂的逻辑处理时，使用watch。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻松理解Flexbox布局精要</title>
    <link href="/2021/03/01/%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3Flexbox%E5%B8%83%E5%B1%80%E7%B2%BE%E8%A6%81/"/>
    <url>/2021/03/01/%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3Flexbox%E5%B8%83%E5%B1%80%E7%B2%BE%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Flexbox布局核心思想"><a href="#1-Flexbox布局核心思想" class="headerlink" title="1.Flexbox布局核心思想"></a>1.Flexbox布局核心思想</h3><p>Flex布局的核心思想是<strong>只需声明布局应该具有的行为而不需要给出具体的实现方式.其优势在于父元素在子元素的宽高或其它属性不明确时仍然可以为其分配好合理的排列方式</strong>,浏览器负责完成实际布局.</p><p>当布局涉及到不定宽度，分布对⻬的场景时，就要优先考虑弹性盒布局。从使用频率与实际效果来看,felx布局更加适合于移动端,pad端等小规模的窗口平台.</p><h2 id="2-Flex结构"><a href="#2-Flex结构" class="headerlink" title="2.Flex结构"></a>2.Flex结构</h2><h3 id="1-flex元素结构"><a href="#1-flex元素结构" class="headerlink" title="1.flex元素结构"></a>1.flex元素结构</h3><p>采用 Flex 布局的元素，称为 Flex 容器，简称”<strong>容器</strong>“。它的子元素就是容器成员，称为 Flex 项目，简称”<strong>项目</strong>“</p><h3 id="2-flex物理结构"><a href="#2-flex物理结构" class="headerlink" title="2.flex物理结构"></a>2.flex物理结构</h3><p>容器默认存在两个轴：<strong>水平轴</strong>（main axis）和<strong>垂直轴</strong>（cross axis），项目默认沿主轴排列（水平轴）：</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
